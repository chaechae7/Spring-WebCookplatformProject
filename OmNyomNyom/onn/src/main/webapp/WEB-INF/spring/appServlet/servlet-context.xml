<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket 
		http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc
		https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans 
		https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.soda.onn" />
	
	<!-- #8. interceptor 등록 -->
	<interceptors>
		<interceptor>
			<mapping path="/admin/**"/>
			<beans:bean id="AdminInterceptor"
						class="com.soda.onn.common.interceptor.AdminInterceptor"/>
		</interceptor>
		<interceptor>
			<mapping path="/mypage/**"/>
			<beans:bean id="MemberInterceptor"
						class="com.soda.onn.common.interceptor.MemberInterceptor"/>
		</interceptor>
	</interceptors>
	
	
    <!-- #11.1 파일업로드를 처리할 Resolver클래스 빈등록(빈이름 주의) -->
	<beans:bean id="multipartResolver" 
				class="org.springframework.web.multipart.commons.CommonsMultipartResolver">   
		<beans:property name="maxUploadSize" value="-1" /> <!-- multipart/form-data 요청당 최대 파일 크기는 50MB이다. default: -1(제한없음)-->
		<beans:property name="maxUploadSizePerFile" value="-1" /> <!-- 파일하나당 최대용량은 10MB이다. 기본값: -1(제한없음) -->
	</beans:bean>
	
	<!-- #13.1 jsonView Bean 및 viewResolver 등록 -->
	<!-- 요청한 viewName과 실제bean이름을 매핑해주는 BeanNameViewResolver를 사용함. -->
    <!-- bean아이디는 viewResolver로 반드시 지정. 처리순서를 1로 우선처리되도록함. -->
	<beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView"/>
    <beans:bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver">
        <beans:property name="order" value="1"/>
    </beans:bean>   
	
    <!-- #14.1 @Responsebody사용을 위한 의존 : 빈등록 (스프링 5.x.x => MappingJackson2HttpMessageConverter) -->
	<beans:bean id="jacksonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />


	<!-- Handler에서 return한 자바객체를 그대로 응답에 쓰기 -->
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jacksonMessageConverter"/>
                <beans:bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
			</beans:list>
		</beans:property>
	</beans:bean>
	
		<!-- stomp관련 빈등록하기 -->
	<websocket:message-broker  application-destination-prefix="/spring">
		<websocket:stomp-endpoint path="/chat">
			<websocket:handshake-interceptors>
				<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />
			</websocket:handshake-interceptors>
			<websocket:sockjs session-cookie-needed="true"/>
		</websocket:stomp-endpoint>
		<websocket:simple-broker prefix="/hello, /chat"/>
	</websocket:message-broker>
	
</beans:beans>
